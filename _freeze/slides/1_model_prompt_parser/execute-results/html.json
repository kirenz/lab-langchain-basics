{
  "hash": "980fc8191633a47044e3807f5692f7bd",
  "result": {
    "markdown": "---\ntitle: Models, Prompts and Output Parsers\ntitle-slide-attributes:\n  data-background-image: ../images/logo.png\n  data-background-size: contain\n  data-background-opacity: \"0.5\"\nlang: en\nsubtitle: LangChain Basics 1\nauthor: Jan Kirenz\nexecute:\n  eval: false\n  echo: true\nhighlight-style: github\nformat:\n  revealjs: \n    toc: true\n    toc-depth: 1\n    embed-resources: false\n    theme: [dark, ../custom.scss]  \n    incremental: true\n    transition: slide\n    background-transition: fade\n    transition-speed: slow\n    code-copy: true\n    code-line-numbers: true\n    smaller: false\n    scrollable: true\n    slide-number: c\n    preview-links: auto\n    chalkboard: \n      buttons: false\n   # logo: ../images/logo.png\n    footer: Jan Kirenz\n---\n\n# LangChain: Models, Prompts and Output Parsers\n\nIn this tutorial, you'll learn how to call LLMs, providing prompts and parsing the response.\n\n\n# Setup\n\n## Python\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfrom langchain.output_parsers import StructuredOutputParser\nfrom langchain.output_parsers import ResponseSchema\nfrom langchain.prompts import ChatPromptTemplate\nfrom langchain.chat_models import ChatOpenAI\nimport datetime\nimport os\nimport openai\n\nfrom dotenv import load_dotenv, find_dotenv\n_ = load_dotenv(find_dotenv())  \nopenai.api_key = os.environ['OPENAI_API_KEY']\n```\n:::\n\n\n# Chat API: OpenAI\n\n## Helper function: get_completion\n\n- Let's start with a direct API call to OpenAI.\n- We don't use LangChain\n\n. . .\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nllm_model = \"gpt-3.5-turbo\"\n\n\ndef get_completion(prompt, model=llm_model):\n    messages = [{\"role\": \"user\", \"content\": prompt}]\n    response = openai.ChatCompletion.create(\n        model=model,\n        messages=messages,\n        temperature=0,\n    )\n    return response.choices[0].message[\"content\"]\n\n```\n:::\n\n\n## Example\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nget_completion(\"What is 1+1?\")\n```\n:::\n\n\n- '1+1 equals 2.'\n\n## Customer Email\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ncustomer_email = \"\"\"\nArrr, I be fuming that me blender lid \\\nflew off and splattered me kitchen walls \\\nwith smoothie! And to make matters worse,\\\nthe warranty don't cover the cost of \\\ncleaning up me kitchen. I need yer help \\\nright now, matey!\n\"\"\"\n```\n:::\n\n\n## Prompt\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nstyle = \"\"\"American English \\\nin a calm and respectful tone\n\"\"\"\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nprompt = f\"\"\"Translate the text \\\nthat is delimited by triple backticks \ninto a style that is {style}.\ntext: ```{customer_email}```\n\"\"\"\n```\n:::\n\n\n## Result\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nresponse = get_completion(prompt)\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nresponse\n```\n:::\n\n\n-' I am quite frustrated that my blender lid flew off and made a mess of my kitchen walls with smoothie! To add to my frustration, the warranty does not cover the cost of cleaning up my kitchen. I kindly request your assistance at this moment, my friend.'\n\n\n# Chat API: LangChain\n\nLet's try how we can do the same using LangChain.\n\n## Model\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nllm_model = \"gpt-3.5-turbo\"\n\nchat = ChatOpenAI(temperature=0.0, model=llm_model)\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nchat\n```\n:::\n\n\n- ChatOpenAI(cache=None, verbose=False, callbacks=None, callback_manager=None, tags=None, metadata=None, client=<class 'openai.api_resources.chat_completion.ChatCompletion'>, model_name='gpt-3.5-turbo', temperature=0.0, model_kwargs={}, openai_api_key='xxx', openai_api_base='', openai_organization='xxx', openai_proxy='', request_timeout=None, max_retries=6, streaming=False, n=1, max_tokens=None, tiktoken_model_name=None)\n\n## Define prompt template\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ntemplate_string = \"\"\"Translate the text \\\nthat is delimited by triple backticks \\\ninto a style that is {style}. \\\ntext: ```{text}```\n\"\"\"\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nprompt_template = ChatPromptTemplate.from_template(template_string)\n```\n:::\n\n\n## Inspect prompt template\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nprompt_template.messages[0].prompt\n```\n:::\n\n\n- PromptTemplate(input_variables=['style', 'text'], output_parser=None, partial_variables={}, template='Translate the text that is delimited by triple backticks into a style that is {style}. text: ```{text}```\\n', template_format='f-string', validate_template=True)\n\n. . .\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nprompt_template.messages[0].prompt.input_variables\n```\n:::\n\n\n- ['style', 'text']\n\n## Customer template input\n\n- Text:\n\n. . .\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\ncustomer_email = \"\"\"\nArrr, I be fuming that me blender lid \\\nflew off and splattered me kitchen walls \\\nwith smoothie! And to make matters worse, \\\nthe warranty don't cover the cost of \\\ncleaning up me kitchen. I need yer help \\\nright now, matey!\n\"\"\"\n```\n:::\n\n\n- Style:\n\n. . .\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\ncustomer_style = \"\"\"American English \\\nin a calm and respectful tone\n\"\"\"\n```\n:::\n\n\n## Create template\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\ncustomer_messages = prompt_template.format_messages(\n    style=customer_style,\n    text=customer_email)\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nprint(type(customer_messages))\nprint(type(customer_messages[0]))\n```\n:::\n\n\n- <class 'list'>\n- <class 'langchain.schema.messages.HumanMessage'>\n\n\n## Customer messages prompt\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nprint(customer_messages[0])\n```\n:::\n\n\n- content=\"Translate the text that is delimited by triple backticks into a style that is American English in a calm and respectful tone\\n. text: ```\\nArrr, I be fuming that me blender lid flew off and splattered me kitchen walls with smoothie! And to make matters worse, the warranty don't cover the cost of cleaning up me kitchen. I need yer help right now, matey!\\n```\\n\" additional_kwargs={} example=False\n\n\n## Customer messages response \n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\n# Call the LLM to translate to the style of the customer message\ncustomer_response = chat(customer_messages)\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nprint(customer_response.content)\n```\n:::\n\n\n- I'm really frustrated that my blender lid flew off and made a mess of my kitchen walls with smoothie! And to make things even worse, the warranty doesn't cover the cost of cleaning up my kitchen. I could really use your help right now, my friend!\n\n## Service reply input\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nservice_reply = \"\"\"Hey there customer, \\\nthe warranty does not cover \\\ncleaning expenses for your kitchen \\\nbecause it's your fault that \\\nyou misused your blender \\\nby forgetting to put the lid on before \\\nstarting the blender. \\\nTough luck! See ya!\n\"\"\"\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nservice_style_pirate = \"\"\"\\\na polite tone \\\nthat speaks in English Pirate\\\n\"\"\"\n```\n:::\n\n\n## Service reply prompt template {.smaller}\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nservice_messages = prompt_template.format_messages(\n    style=service_style_pirate,\n    text=service_reply)\n\nprint(service_messages[0].content)\n```\n:::\n\n\n- Translate the text that is delimited by triple backticks into a style that is a polite tone that speaks in English Pirate. text: \\```Hey there customer, the warranty does not cover cleaning expenses for your kitchen because it's your fault that you misused your blender by forgetting to put the lid on before starting the blender. Tough luck! See ya!\n\\```\n\n## Service reply response\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nservice_response = chat(service_messages)\nprint(service_response.content)\n```\n:::\n\n\n- Ahoy there, matey! I regret to inform ye that the warranty be not coverin' the costs o' cleanin' yer galley, as 'tis yer own fault fer misusin' yer blender by forgettin' to secure the lid afore startin' it. Aye, tough luck, me heartie! Fare thee well!\n\n\n# Output Parsers\n\n## Output style\n\n- Let's start with defining how we would like the LLM output to look like:\n\n. . .\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\n{\n    \"gift\": False,\n    \"delivery_days\": 5,\n    \"price_value\": \"pretty affordable!\"\n}\n```\n:::\n\n\n## Customer review and template {.smaller}\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\ncustomer_review = \"\"\"\\\nThis leaf blower is pretty amazing.  It has four settings:\\\ncandle blower, gentle breeze, windy city, and tornado. \\\nIt arrived in two days, just in time for my wife's \\\nanniversary present. \\\nI think my wife liked it so much she was speechless. \\\nSo far I've been the only one using it, and I've been \\\nusing it every other morning to clear the leaves on our lawn. \\\nIt's slightly more expensive than the other leaf blowers \\\nout there, but I think it's worth it for the extra features.\n\"\"\"\n\nreview_template = \"\"\"\\\nFor the following text, extract the following information:\n\ngift: Was the item purchased as a gift for someone else? \\\nAnswer True if yes, False if not or unknown.\n\ndelivery_days: How many days did it take for the product \\\nto arrive? If this information is not found, output -1.\n\nprice_value: Extract any sentences about the value or price,\\\nand output them as a comma separated Python list.\n\nFormat the output as JSON with the following keys:\ngift\ndelivery_days\nprice_value\n\ntext: {text}\n\"\"\"\n```\n:::\n\n\n## Prompt template\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nprompt_template = ChatPromptTemplate.from_template(review_template)\nprint(prompt_template)\n```\n:::\n\n\n- input_variables=['text'] output_parser=None partial_variables={} messages=[HumanMessagePromptTemplate(prompt=PromptTemplate(input_variables=['text'], output_parser=None, partial_variables={}, template='For the following text, extract the following information:\\ngift: Was the item purchased as a gift for someone else? Answer True if yes, False if not or unknown.\\ndelivery_days: How many days did it take for the product to arrive? If this information is not found, output -1.\\nprice_value: Extract any sentences about the value or price,and output them as a comma separated Python list.\\nFormat the output as JSON with the following keys:\\ngift\\ndelivery_days\\nprice_value\\ntext: {text}\\n', template_format='f-string', validate_template=True), additional_kwargs={})]\n\n\n## Response {.smaller}\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nmessages = prompt_template.format_messages(text=customer_review)\nchat = ChatOpenAI(temperature=0.0, model=llm_model)\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nresponse = chat(messages)\nprint(response.content)\n```\n:::\n\n\n```markdown\n\n{\n  \"gift\": false,\n  \"delivery_days\": 2,\n  \"price_value\": [\"It's slightly more expensive than the other leaf blowers out there, but I think it's worth it for the extra features.\"],\n  \"text\": \"This leaf blower is pretty amazing. It has four settings:candle blower, gentle breeze, windy city, and tornado. It arrived in two days, just in time for my wife's anniversary present. I think my wife liked it so much she was speechless. So far I've been the only one using it, and I've been using it every other morning to clear the leaves on our lawn. It's slightly more expensive than the other leaf blowers out there, but I think it's worth it for the extra features.\"\n}\n```\n\n## Inspect response\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\ntype(response.content)\n```\n:::\n\n\n- str\n\n. . .\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\n# You will get an error by running this line of code\n# because'gift' is not a dictionary\n# 'gift' is a string\nresponse.content.get('gift')\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\n/Users/jankirenz/labs/lab-langchain-basics/slides/1_model_prompt_parser.qmd in line 1\n----> 342 response.content.get('gift')\n\nAttributeError: 'str' object has no attribute 'get'\n```\n:::\n\n\n# Parse Output into Dictionary\n\n## Parse output into dictionary {.smaller}\n\n- Parse the LLM output string into a Python dictionary\n\n. . .\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\ngift_schema = ResponseSchema(name=\"gift\",\n                             description=\"Was the item purchased\\\n                             as a gift for someone else? \\\n                             Answer True if yes,\\\n                             False if not or unknown.\")\n\ndelivery_days_schema = ResponseSchema(name=\"delivery_days\",\n                                      description=\"How many days\\\n                                      did it take for the product\\\n                                      to arrive? If this \\\n                                      information is not found,\\\n                                      output -1.\")\n\nprice_value_schema = ResponseSchema(name=\"price_value\",\n                                    description=\"Extract any\\\n                                    sentences about the value or \\\n                                    price, and output them as a \\\n                                    comma separated Python list.\")\n\nresponse_schemas = [gift_schema,\n                    delivery_days_schema,\n                    price_value_schema]\n```\n:::\n\n\n## StructuredOutputParser {.smaller}\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\noutput_parser = StructuredOutputParser.from_response_schemas(response_schemas)\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\nformat_instructions = output_parser.get_format_instructions()\n```\n:::\n\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\nprint(format_instructions)\n```\n:::\n\n\n- The output should be a markdown code snippet formatted in the following schema, including the leading and trailing \"```json\" and \"```\":\n\n```json\n{\n\t\"gift\": string  // Was the item purchased                             as a gift for someone else?                              Answer True if yes,                             False if not or unknown.\n\t\"delivery_days\": string  // How many days                                      did it take for the product                                      to arrive? If this                                       information is not found,                                      output -1.\n\t\"price_value\": string  // Extract any                                    sentences about the value or                                     price, and output them as a                                     comma separated Python list.\n}\n```\n\n\n\n## Review template 2 {.smaller}\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\nreview_template_2 = \"\"\"\\\nFor the following text, extract the following information:\n\ngift: Was the item purchased as a gift for someone else? \\\nAnswer True if yes, False if not or unknown.\n\ndelivery_days: How many days did it take for the product\\\nto arrive? If this information is not found, output -1.\n\nprice_value: Extract any sentences about the value or price,\\\nand output them as a comma separated Python list.\n\ntext: {text}\n\n{format_instructions}\n\"\"\"\n\nprompt = ChatPromptTemplate.from_template(template=review_template_2)\n\nmessages = prompt.format_messages(text=customer_review,\n                                  format_instructions=format_instructions)\n```\n:::\n\n\n## Inspect template\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\nprint(messages[0].content)\n```\n:::\n\n\n- For the following text, extract the following information:\ngift: Was the item purchased as a gift for someone else? Answer True if yes, False if not or unknown.\ndelivery_days: How many days did it take for the productto arrive? If this information is not found, output -1.\nprice_value: Extract any sentences about the value or price,and output them as a comma separated Python list.\ntext: This leaf blower is pretty amazing.  It has four settings:candle blower, gentle breeze, windy city, and tornado. It arrived in two days, just in time for my wife's anniversary present. I think my wife liked it so much she was speechless. So far I've been the only one using it, and I've been using it every other morning to clear the leaves on our lawn. It's slightly more expensive than the other leaf blowers out there, but I think it's worth it for the extra features.\n\nThe output should be a markdown code snippet formatted in the following schema, including the leading and trailing \"```json\" and \"```\":\n\n```json\n{\n\t\"gift\": string  // Was the item purchased                             as a gift for someone else?                              Answer True if yes,                             False if not or unknown.\n\t\"delivery_days\": string  // How many days                                      did it take for the product                                      to arrive? If this                                       information is not found,                                      output -1.\n\t\"price_value\": string  // Extract any                                    sentences about the value or                                     price, and output them as a                                     comma separated Python list.\n}\n```\n\n\n## Response\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\nresponse = chat(messages)\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=41}\n``` {.python .cell-code}\nprint(response.content)\n```\n:::\n\n\n. . .\n\n```json\n{\n\t\"gift\": false,\n\t\"delivery_days\": \"2\",\n\t\"price_value\": \"It's slightly more expensive than the other leaf blowers out there, but I think it's worth it for the extra features.\"\n}\n```\n\n## Parse output {.smaller}\n\n::: {.cell execution_count=42}\n``` {.python .cell-code}\noutput_dict = output_parser.parse(response.content)\n```\n:::\n\n\n. . . \n\n::: {.cell execution_count=43}\n``` {.python .cell-code}\noutput_dict\n```\n:::\n\n\n. . .\n\n```json\n{'gift': False,\n 'delivery_days': '2',\n 'price_value': \"It's slightly more expensive than the other leaf blowers out there, but I think it's worth it for the extra features.\"}\n```\n\n::: {.cell execution_count=44}\n``` {.python .cell-code}\ntype(output_dict)\n```\n:::\n\n\n- dict\n\n::: {.cell execution_count=45}\n``` {.python .cell-code}\noutput_dict.get('delivery_days')\n```\n:::\n\n\n- 2\n\n\n# Acknowledgments\n\n*This tutorial is mainly based on the excellent course [\"LangChain for LLM Application Development\"](https://www.deeplearning.ai/short-courses/langchain-for-llm-application-development/) provided by Harrison Chase and Andrew Ng*\n\n# What's next? {background-image=\"../images/logo.png\" background-opacity=\"0.5\"}\n\n**Congratulations! You have completed this tutorial** 👍\n\n**Next, you may want to go back to the [lab's website](https://kirenz.github.io/lab-langchain-basics/)**\n\n",
    "supporting": [
      "1_model_prompt_parser_files"
    ],
    "filters": [],
    "includes": {}
  }
}