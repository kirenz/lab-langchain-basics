{
  "hash": "319b6ebaa636be81b99d1af1780e9510",
  "result": {
    "markdown": "---\ntitle: Q&A over Documents\ntitle-slide-attributes:\n  data-background-image: ../images/logo.png\n  data-background-size: contain\n  data-background-opacity: \"0.5\"\nlang: en\nsubtitle: LangChain Basics 4\nauthor: Jan Kirenz\nexecute:\n  eval: false\n  echo: true\nhighlight-style: github\nformat:\n  revealjs: \n    toc: true\n    toc-depth: 1\n    embed-resources: false\n    theme: [dark, ../custom.scss]  \n    incremental: true\n    transition: slide\n    background-transition: fade\n    transition-speed: slow\n    code-copy: true\n    code-line-numbers: true\n    smaller: false\n    scrollable: true\n    slide-number: c\n    preview-links: auto\n    chalkboard: \n      buttons: false\n   # logo: ../images/logo.png\n    footer: Jan Kirenz\n---\n\n# LangChain: Q&A over Documents\n\nLet's build a tool that would allow you to query a product catalog for items of interest.\n\n# Setup\n\n## Python\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfrom langchain.embeddings import OpenAIEmbeddings\nfrom langchain.indexes import VectorstoreIndexCreator\nfrom IPython.display import display, Markdown\nfrom langchain.vectorstores import DocArrayInMemorySearch  # vector store\nfrom langchain.document_loaders import CSVLoader\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.chains import RetrievalQA\nimport datetime\nimport os\n\nfrom dotenv import load_dotenv, find_dotenv\n_ = load_dotenv(find_dotenv())  # read local .env file\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# pip install --upgrade langchain\n```\n:::\n\n\n# Simple example\n\n## Load Data\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nfile = '../data/OutdoorClothingCatalog_1000.csv'\nloader = CSVLoader(file_path=file)\n```\n:::\n\n\n. . .\n\n- Create vector store\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nindex = VectorstoreIndexCreator(\n    vectorstore_cls=DocArrayInMemorySearch\n).from_loaders([loader])\n```\n:::\n\n\n## Query and response\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nquery = \"Please list all your shirts with sun protection \\\nin a table in markdown and summarize each one.\"\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nresponse = index.query(query)\n```\n:::\n\n\n. . .\n\n::: {.cell output-location='slide' execution_count=7}\n``` {.python .cell-code}\ndisplay(Markdown(response))\n```\n:::\n\n\n# Step By Step\n\n## Basics\n\n- Language models ca only inspect a few thousands word at a time\n\n- This is why we need embeddings and vector stores\n\n\n## Loader\n\n- We use our `loader` from before (`loader = CSVLoader(file_path=file)`\n\n\n. . .\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ndocs = loader.load()\n```\n:::\n\n\n::: {.cell output-location='fragment' execution_count=9}\n``` {.python .cell-code}\ndocs[0]\n```\n:::\n\n\n- Document(page_content=\": 0\\nname: Women's Campside Oxfords\\ndescription: This ultracomfortable lace-to-toe Oxford boasts a super-soft canvas, thick cushioning, and quality construction for a broken-in feel from the first time you put them on. \\n\\nSize & Fit: Order regular shoe size. For half sizes not offered, order up to next whole size. \\n\\nSpecs: Approx. weight: 1 lb.1 oz. per pair. \\n\\nConstruction: Soft canvas material for a broken-in feel and look. Comfortable EVA innersole with Cleansport NXT¬Æ antimicrobial odor control. Vintage hunt, fish and camping motif on innersole. Moderate arch contour of innersole. EVA foam midsole for cushioning and support. Chain-tread-inspired molded rubber outsole with modified chain-tread pattern. Imported. \\n\\nQuestions? Please contact us for any inquiries.\", metadata={'source': '../data/OutdoorClothingCatalog_1000.csv', 'row': 0})\n\n## Embeddings\n\n- Our documents are so small that we dont need to chunck them first\n\n. . .\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nembeddings = OpenAIEmbeddings()\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nembed = embeddings.embed_query(\"Hi my name is Jan\")\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nprint(len(embed))\n```\n:::\n\n\n- 1536\n\n. . .\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nprint(embed[:5])\n```\n:::\n\n\n- [-0.015501204878091812, -0.0016401495086029172, -0.01953849568963051, -0.016909271478652954, -0.021893581375479698]\n\n## Create vector store\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\ndb = DocArrayInMemorySearch.from_documents(\n    docs,\n    embeddings\n)\n```\n:::\n\n\n## Query {.smaller}\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nquery = \"Please suggest a shirt with sunblocking\"\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\ndocs = db.similarity_search(query)\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nlen(docs)\n```\n:::\n\n\n- 4\n\n. . .\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ndocs[0]\n```\n:::\n\n\n- Document(page_content=': 255\\nname: Sun Shield Shirt by\\ndescription: \"Block the sun, not the fun ‚Äì our high-performance sun shirt is guaranteed to protect from harmful UV rays. \\n\\nSize & Fit: Slightly Fitted: Softly shapes the body. Falls at hip.\\n\\nFabric & Care: 78% nylon, 22% Lycra Xtra Life fiber. UPF 50+ rated ‚Äì the highest rated sun protection possible. Handwash, line dry.\\n\\nAdditional Features: Wicks moisture for quick-drying comfort. Fits comfortably over your favorite swimsuit. Abrasion resistant for season after season of wear. Imported.\\n\\nSun Protection That Won\\'t Wear Off\\nOur high-performance fabric provides SPF 50+ sun protection, blocking 98% of the sun\\'s harmful rays. This fabric is recommended by The Skin Cancer Foundation as an effective UV protectant.', metadata={'source': '../data/OutdoorClothingCatalog_1000.csv', 'row': 255})\n\n# Manual Example\n\n. . .\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nllm_model = \"gpt-3.5-turbo\"\nllm = ChatOpenAI(temperature=0.0, model=llm_model)\n```\n:::\n\n\n. . .\n\n- If we would do it manually, we would combine the text with a join\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nqdocs = \"\".join([docs[i].page_content for i in range(len(docs))])\n```\n:::\n\n\n. . .\n\n- And then we would provide qdocs to the llm:\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\n# This may take a while\nresponse = llm.call_as_llm(f\"{qdocs} Question: Please list all your \\\nshirts with sun protection in a table in markdown and summarize each one.\")\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\ndisplay(Markdown(response))\n```\n:::\n\n\nXYZ Error\n\n# Retrieval Chain\n\n## Chain\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nretriever = db.as_retriever()\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nqa_stuff = RetrievalQA.from_chain_type(\n    llm=llm,\n    chain_type=\"stuff\",  # one propmt and one result\n    retriever=retriever,\n    verbose=True\n)\n```\n:::\n\n\n## Query\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nquery = \"Please list all your shirts with sun protection in a table \\\nin markdown and summarize each one.\"\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nresponse = qa_stuff.run(query)\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\ndisplay(Markdown(response))\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nresponse = index.query(query, llm=llm)\n```\n:::\n\n\n# Acknowledgments\n\n*This tutorial is mainly based on the excellent course [\"LangChain for LLM Application Development\"](https://www.deeplearning.ai/short-courses/langchain-for-llm-application-development/) provided by Harrison Chase and Andrew Ng*\n\n# What's next? {background-image=\"../images/logo.png\" background-opacity=\"0.5\"}\n\n**Congratulations! You have completed this tutorial** üëç\n\n**Next, you may want to go back to the [lab's website](https://kirenz.github.io/langchain-basics/)**\n\n",
    "supporting": [
      "4_qa_files"
    ],
    "filters": [],
    "includes": {}
  }
}